{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/git-dashboard/git-dashboard.css","webpack:///./src/app/components/git-dashboard/git-dashboard.html","webpack:///./src/app/components/git-dashboard/git-dashboard.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n    <h1>\\n        {{ title }}!\\n    </h1>\\n</div>\\n<git-dashboard></git-dashboard>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Git Graph';\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations'; //\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n    MatCardModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatExpansionModule\n} from '@angular/material'; //\n\nimport { FlexLayoutModule } from '@angular/flex-layout'; //\nimport { GitDashboardComp } from './components/git-dashboard/git-dashboard';\n\n\nimport {AppComponent} from './app.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        GitDashboardComp\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule, //\n        MatCardModule, //\n        MatIconModule, //\n        MatToolbarModule, //\n        MatButtonModule, //\n        MatFormFieldModule, //\n        MatInputModule, //\n        MatSelectModule,\n        MatExpansionModule,\n        FlexLayoutModule, //\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \"\"","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-around start\\\">\\n\\n    <form fxFlex=\\\"45\\\" fxLayout=\\\"column\\\" #gitdashboardform=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(gitdashboardform)\\\" novalidate>\\n        <mat-card fxLayout=\\\"column\\\">\\n            <mat-card-title>Preview</mat-card-title>\\n            <div>Branch: {{ branch}}</div>\\n            <div>Author: {{ authorName }} &lt;{{authorEmail}}&gt;</div>\\n            <div fxFlexOffset=\\\"10px\\\">{{ message}}</div>\\n            <div fxFlexOffset=\\\"20px\\\">\\n                <button button=\\\"submit\\\" mat-raised-button color=\\\"primary\\\">Commit!</button>\\n            </div>\\n        </mat-card>\\n        <mat-accordion>\\n            <mat-expansion-panel>\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        Message\\n                    </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <mat-card fxLayout=\\\"column\\\">\\n                    <mat-card-title>Message</mat-card-title>\\n                    <mat-form-field class=\\\"git-form\\\">\\n                        <input matInput [(ngModel)]=\\\"message\\\" name=\\\"message\\\" required\\n                               placeholder=\\\"Name\\\" type=\\\"text\\\"/>\\n                    </mat-form-field>\\n                </mat-card>\\n            </mat-expansion-panel>\\n            <mat-expansion-panel>\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        Author\\n                    </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <mat-card fxLayout=\\\"column\\\">\\n                    <mat-card-title>Author</mat-card-title>\\n                    <mat-form-field class=\\\"git-form\\\">\\n                        <input matInput [(ngModel)]=\\\"authorName\\\" name=\\\"authorName\\\" required\\n                               placeholder=\\\"Name\\\" type=\\\"text\\\"/>\\n                    </mat-form-field>\\n                    <mat-form-field class=\\\"git-form\\\">\\n                        <input matInput [(ngModel)]=\\\"authorEmail\\\" name=\\\"authorEmail\\\" required\\n                               placeholder=\\\"Email\\\" type=\\\"text\\\"/>\\n                    </mat-form-field>\\n                </mat-card>\\n            </mat-expansion-panel>\\n            <mat-expansion-panel>\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        Branch\\n                    </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <mat-card fxLayout=\\\"column\\\">\\n                    <mat-form-field fxFlexOffset=\\\"20px\\\">\\n                        <mat-select placeholder=\\\"Choose branch\\\" [(ngModel)]=\\\"branch\\\" name=\\\"branch\\\">\\n                            <mat-option *ngFor=\\\"let b of branches\\\" [value]=\\\"b.name\\\">\\n                                {{b.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </mat-card>\\n            </mat-expansion-panel>\\n            <mat-expansion-panel>\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        New branch\\n                    </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <mat-card fxLayout=\\\"column\\\">\\n                    <mat-form-field class=\\\"git-form\\\">\\n                        <input matInput [(ngModel)]=\\\"newbranch\\\" name=\\\"newbranch\\\" required\\n                               placeholder=\\\"Name\\\" type=\\\"text\\\"/>\\n                    </mat-form-field>\\n                    <mat-form-field fxFlexOffset=\\\"20px\\\">\\n                        <mat-select placeholder=\\\"Branching from\\\" [(ngModel)]=\\\"startingbranch\\\" name=\\\"startingbranch\\\">\\n                            <mat-option *ngFor=\\\"let b of branches\\\" [value]=\\\"b.name\\\">\\n                                {{b.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                    <div fxFlexOffset=\\\"20px\\\">\\n                        <button type=\\\"button\\\" (click)=\\\"addBranch(newbranch,startingbranch)\\\" mat-raised-button\\n                                color=\\\"primary\\\">\\n                            Add\\n                            Branch!\\n                        </button>\\n                    </div>\\n                </mat-card>\\n            </mat-expansion-panel>\\n\\n            <mat-expansion-panel>\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        Merge branches\\n                    </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <mat-card fxLayout=\\\"column\\\">\\n                    <mat-form-field fxFlexOffset=\\\"20px\\\">\\n                        <mat-select placeholder=\\\"Merge\\\" [(ngModel)]=\\\"mergefrom\\\" name=\\\"mergefrom\\\">\\n                            <mat-option *ngFor=\\\"let b of branches\\\" [value]=\\\"b.name\\\">\\n                                {{b.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                    <mat-form-field fxFlexOffset=\\\"20px\\\">\\n                        <mat-select placeholder=\\\"Into\\\" [(ngModel)]=\\\"mergeto\\\" name=\\\"mergeto\\\">\\n                            <mat-option *ngFor=\\\"let b of branches\\\" [value]=\\\"b.name\\\">\\n                                {{b.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                    <div fxFlexOffset=\\\"20px\\\">\\n                        <button type=\\\"button\\\" (click)=\\\"mergeBranches(mergefrom,mergeto)\\\" mat-raised-button\\n                                color=\\\"primary\\\">\\n                            Merge\\n                            branches!\\n                        </button>\\n                    </div>\\n                </mat-card>\\n            </mat-expansion-panel>\\n        </mat-accordion>\\n    </form>\\n\\n    <div fxFlex=\\\"45\\\">\\n        <canvas id=\\\"gitGraph\\\"></canvas>\\n    </div>\\n\\n</div>\\n\\n\\n<!-- <div>Author: {{ authorName }} &lt;{{authorEmail}}&gt;</div>\\n<div>Form value: {{ gitdashboardform.value | json }}</div> -->\"","import {Component} from '@angular/core';\nimport {branch} from \"@angular-devkit/schematics/src/tree/static\";\n\ndeclare var GitGraph: any;\n\n@Component({\n    selector: 'git-dashboard',\n    templateUrl: './git-dashboard.html',\n    styleUrls: ['./git-dashboard.css']\n})\nexport class GitDashboardComp {\n\n    /**\n     * Master branch\n     * @type {string}\n     */\n    master = \"master\";\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////   MODELS   //////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * Model - Author name\n     * @type {string}\n     */\n    authorName: string = 'Antonio Pastorino';\n\n    /**\n     * Model - Author email\n     * @type {string}\n     */\n    authorEmail: string = 'antonio.pastorino@gmail.com';\n\n    /**\n     * Model - Nome branch per il commit\n     * @type {string}\n     */\n    branch: string = 'master';\n\n    /**\n     * Model - Nome nuovo branch\n     * @type {string}\n     */\n    newbranch: string = '';\n\n    /**\n     *  Model - Message\n     * @type {string}\n     */\n    message: string = 'This is a commit message';\n\n\n    /**\n     *\n     * @type {string}\n     */\n    startingbranch: string = this.master;\n\n\n    ngOnInit() {\n        console.log(\"Initializing...\");\n        this.initGraph();\n        console.log(\"Graph initialized\");\n        console.log(\"Creating master\");\n        this.addBranch(this.master);\n        console.log(\"Master created\");\n        console.log(\"Making a first commit...\");\n        this.getBranch(this.master).commit(\n            {\n                message: \"First commit\",\n                author: \"Antonio Pastorino <antonio.pastorino@gmail.com>\"\n            }\n        );\n        console.log(\"Done! Ready!\");\n    }\n\n    /**\n     * Submit del form per creare un commit\n     */\n    onSubmit() {\n\n\n        let branch;\n        let branch_name = this.branch;\n        if (this.hasBranch(branch_name)) {\n            branch = this.getBranch(branch_name);\n        } else {\n            if (branch_name == this.master) {\n                branch = this.addNewBranch(branch_name);\n            } else {\n                branch = this.addBranch(branch_name);\n            }\n\n        }\n\n        //beregister.merge(staging); // merges beregister in staging\n\n        let commit_author = this.authorName + \"<\" + this.authorEmail + \">\";\n        let commit_message = this.message;\n\n        branch.commit(\n            {\n                message: commit_message,\n                author: commit_author\n            }\n        );\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////   GESTIONE DEL GRAFO   ////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Template del grafo\n     * @type {boolean}\n     */\n    graphTemplate: any = false;\n\n    /**\n     * Grafo git\n     * @type {boolean}\n     */\n    graph: any = false;\n\n    /**\n     * Restistuisce il grafo git\n     */\n    getGraph = function () {\n        this.initGraph();\n        return this.graph;\n    };\n\n    /**\n     * Inizializza il template del grafo git\n     */\n    initGraphTemplate = function () {\n        if (!this.graphTemplate) {\n            var templateConfig = {\n                colors: [\"#467CC3\", \"#CB443C\", \"#ddd\"],\n                branch: {\n                    lineWidth: 6,\n                    spacingX: 50,\n                    showLabel: true,\n                },\n                commit: {\n                    spacingY: -80,\n                    dot: {\n                        size: 10\n                    },\n                    message: {\n                        displayAuthor: true,\n                        displayBranch: false,\n                        displayHash: false,\n                        font: \"normal 10pt Verdana\"\n                    },\n                    shouldDisplayTooltipsInCompactMode: false,\n                    tooltipHTMLFormatter: function (commit) {\n                        return \"\" + commit.sha1 + \"\" + \": \" + commit.message;\n                    }\n                }\n            };\n            this.graphTemplate = new GitGraph.Template(templateConfig);\n        }\n    };\n\n    /**\n     * Inizializza il grafo git\n     */\n    initGraph = function () {\n        this.initGraphTemplate();\n        if (!this.graph) {\n            this.graph = new GitGraph({\n                reverseArrow: false,\n                orientation: \"vertical\",\n                mode: \"extended\",\n                template: this.graphTemplate\n            });\n        }\n    };\n\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //////////////////////////////////////   GESTIONE DEI BRANCHES   ///////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Elenco di branches attivi\n     * @type {any[]}\n     */\n    branches = [];\n\n\n    /**\n     * Verifica se un branch è già stato creato\n     * @param branch\n     * @returns {boolean}\n     */\n    hasBranch = function (branch) {\n        let res = false;\n        this.branches.forEach(function (el) {\n            if (el.name == branch) {\n                res = true\n            }\n        });\n        return res;\n    };\n\n    /**\n     * Recupera e restituisce un determinato branch\n     *\n     * @param branch\n     * @returns {any}\n     */\n    getBranch = function (branch) {\n        let res = null;\n        this.branches.forEach(function (el) {\n            if (el.name == branch) {\n                res = el\n            }\n        });\n        return res;\n    };\n\n    /**\n     * Aggiunge un nuovo branch a partire dalla head corrente\n     * @param branch\n     * @returns {any}\n     */\n    addNewBranch = function (branch) {\n        if (!this.hasBranch(branch)) {\n            let new_branch = this.getGraph().branch({name: branch});\n            this.branches.push(new_branch);\n            return new_branch;\n        } else {\n            return this.getBranch(branch);\n        }\n    };\n\n    /**\n     * Biforca un nuovo branch a partire da un branch esistente\n     * @param branchName\n     * @param {string} startingFrom\n     * @returns {any}\n     */\n    addBranch = function (branchName, startingFrom = 'master') {\n        if (branchName == this.master) {\n            this.addNewBranch(branchName);\n        }\n\n        if (!this.hasBranch(branchName)) {\n            let starting_branch;\n            if (!this.hasBranch(startingFrom)) {\n                starting_branch = this.addNewBranch(startingFrom);\n            } else {\n                starting_branch = this.getBranch(startingFrom);\n            }\n\n            let new_branch = starting_branch.branch(\n                {\n                    name: branchName,\n                    parentBranch: starting_branch\n                }\n            );\n            this.branches.push(new_branch);\n            return new_branch;\n        } else {\n            return this.getBranch(branchName);\n        }\n    };\n\n    mergeBranches(branchName, destination) {\n        if (this.hasBranch(branchName) && this.hasBranch(destination)) {\n            let branch = this.getBranch(branchName)\n            let destination_branch = this.getBranch(destination);\n            branch.merge(destination_branch);\n        }\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}